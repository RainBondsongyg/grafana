package channels_config

import (
	"github.com/grafana/grafana/pkg/services/ngalert/notifier/channels"
	"github.com/grafana/grafana/pkg/util"
)

// GetAvailableNotifiers returns the metadata of all the notification channels that can be configured.
func GetAvailableNotifiers() []*NotifierPlugin {
	pushoverSoundOptions := []SelectOption{
		{
			Value: "default",
			Label: "Default",
		},
		{
			Value: "pushover",
			Label: "Pushover",
		}, {
			Value: "bike",
			Label: "Bike",
		}, {
			Value: "bugle",
			Label: "Bugle",
		}, {
			Value: "cashregister",
			Label: "Cashregister",
		}, {
			Value: "classical",
			Label: "Classical",
		}, {
			Value: "cosmic",
			Label: "Cosmic",
		}, {
			Value: "falling",
			Label: "Falling",
		}, {
			Value: "gamelan",
			Label: "Gamelan",
		}, {
			Value: "incoming",
			Label: "Incoming",
		}, {
			Value: "intermission",
			Label: "Intermission",
		}, {
			Value: "magic",
			Label: "Magic",
		}, {
			Value: "mechanical",
			Label: "Mechanical",
		}, {
			Value: "pianobar",
			Label: "Pianobar",
		}, {
			Value: "siren",
			Label: "Siren",
		}, {
			Value: "spacealarm",
			Label: "Spacealarm",
		}, {
			Value: "tugboat",
			Label: "Tugboat",
		}, {
			Value: "alien",
			Label: "Alien",
		}, {
			Value: "climb",
			Label: "Climb",
		}, {
			Value: "persistent",
			Label: "Persistent",
		}, {
			Value: "echo",
			Label: "Echo",
		}, {
			Value: "updown",
			Label: "Updown",
		}, {
			Value: "none",
			Label: "None",
		},
	}

	pushoverPriorityOptions := []SelectOption{
		{
			Value: "2",
			Label: "Emergency",
		},
		{
			Value: "1",
			Label: "High",
		},
		{
			Value: "0",
			Label: "Normal",
		},
		{
			Value: "-1",
			Label: "Low",
		},
		{
			Value: "-2",
			Label: "Lowest",
		},
	}

	return []*NotifierPlugin{
		{
			Type:        "dingding",
			Name:        "DingDing",
			Description: util.Translation("Sends HTTP POST request to DingDing"),
			Heading:     "DingDing settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxx",
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("Message Type"),
					Element:      ElementTypeSelect,
					PropertyName: "msgType",
					SelectOptions: []SelectOption{
						{
							Value: "link",
							Label: util.Translation("Link")},
						{
							Value: "actionCard",
							Label: util.Translation("ActionCard"),
						},
					},
				},
				{ // New in 9.3.
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the message"),
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "title",
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Description:  util.Translation("Custom DingDing message. You can use template variables"),
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "kafka",
			Name:        "Kafka REST Proxy",
			Description: util.Translation("Sends notifications to Kafka Rest Proxy"),
			Heading:     "Kafka settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Kafka REST Proxy"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "http://localhost:8082",
					PropertyName: "kafkaRestProxy",
					Required:     true,
				},
				{
					Label:        util.Translation("Topic"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "topic1",
					PropertyName: "kafkaTopic",
					Required:     true,
				},
				{
					Label:        util.Translation("Description"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated description of the Kafka message"),
					PropertyName: "description",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{
					Label:        util.Translation("Details"),
					Element:      ElementTypeTextArea,
					Description:  util.Translation("Custom details to include with the message. You can use template variables"),
					PropertyName: "details",
					Placeholder:  channels.DefaultMessageEmbed,
				},
			},
		},
		{
			Type:        "email",
			Name:        "Email",
			Description: util.Translation("Sends notifications using Grafana server configured SMTP settings"),
			Heading:     "Email settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Single email"),
					Description:  util.Translation("Send a single email to all recipients"),
					Element:      ElementTypeCheckbox,
					PropertyName: "singleEmail",
				},
				{
					Label:        util.Translation("Addresses"),
					Description:  util.Translation("You can enter multiple email addresses using a \";\" separator"),
					Element:      ElementTypeTextArea,
					PropertyName: "addresses",
					Required:     true,
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Description:  util.Translation("Optional message to include with the email. You can use template variables"),
					Element:      ElementTypeTextArea,
					PropertyName: "message",
				},
				{ // New in 9.0.
					Label:        util.Translation("Subject"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated subject of the email"),
					PropertyName: "subject",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
			},
		},
		{
			Type:        "pagerduty",
			Name:        "PagerDuty",
			Description: util.Translation("Sends notifications to PagerDuty"),
			Heading:     "PagerDuty settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Integration Key"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Pagerduty Integration Key"),
					PropertyName: "integrationKey",
					Required:     true,
					Secure:       true,
				},
				{
					Label:   util.Translation("Severity"),
					Element: ElementTypeSelect,
					SelectOptions: []SelectOption{
						{
							Value: "critical",
							Label: "Critical",
						},
						{
							Value: "error",
							Label: "Error",
						},
						{
							Value: "warning",
							Label: "Warning",
						},
						{
							Value: "info",
							Label: "Info",
						},
					},
					PropertyName: "severity",
				},
				{ // New in 8.0.
					Label:        util.Translation("Class"),
					Description:  util.Translation("The class/type of the event, for example 'ping failure' or 'cpu load'"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "class",
				},
				{ // New in 8.0.
					Label:        util.Translation("Component"),
					Description:  util.Translation("Component of the source machine that is responsible for the event, for example mysql or eth0"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "Grafana",
					PropertyName: "component",
				},
				{ // New in 8.0.
					Label:        util.Translation("Group"),
					Description:  util.Translation("Logical grouping of components of a service, for example 'app-stack'"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "group",
				},
				{ // New in 8.0.
					Label:        util.Translation("Summary"),
					Description:  util.Translation("You can use templates for summary"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "summary",
				},
			},
		},
		{
			Type:        "victorops",
			Name:        "VictorOps",
			Description: util.Translation("Sends notifications to VictorOps"),
			Heading:     "VictorOps settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("VictorOps url"),
					PropertyName: "url",
					Required:     true,
				},
				{ // New in 8.0.
					Label:        util.Translation("Message Type"),
					Element:      ElementTypeSelect,
					PropertyName: "messageType",
					SelectOptions: []SelectOption{
						{
							Value: "CRITICAL",
							Label: "CRITICAL"},
						{
							Value: "WARNING",
							Label: "WARNING",
						},
					},
				},
				{ // New in 9.3.
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title to display"),
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{ // New in 9.3.
					Label:        util.Translation("Description"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated description of the message"),
					PropertyName: "description",
					Placeholder:  channels.DefaultMessageEmbed,
				},
			},
		},
		{
			Type:        "pushover",
			Name:        "Pushover",
			Description: util.Translation("Sends HTTP POST request to the Pushover API"),
			Heading:     "Pushover settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("API Token"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Application token"),
					PropertyName: "apiToken",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        util.Translation("User key(s)"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("comma-separated list"),
					PropertyName: "userKey",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        util.Translation("Device(s) (optional)"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("comma-separated list; leave empty to send to all devices"),
					PropertyName: "device",
				},
				{
					Label:         util.Translation("Alerting priority"),
					Element:       ElementTypeSelect,
					SelectOptions: pushoverPriorityOptions,
					PropertyName:  "priority",
				},
				{
					Label:         util.Translation("OK priority"),
					Element:       ElementTypeSelect,
					SelectOptions: pushoverPriorityOptions,
					PropertyName:  "okPriority",
				},
				{
					Description:  util.Translation("How often (in seconds) the Pushover servers will send the same alerting or OK notification to the user"),
					Label:        util.Translation("Retry (Only used for Emergency Priority)"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("minimum 30 seconds"),
					PropertyName: "retry",
				},
				{
					Description:  util.Translation("How many seconds the alerting or OK notification will continue to be retried"),
					Label:        util.Translation("Expire (Only used for Emergency Priority)"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("maximum 86400 seconds"),
					PropertyName: "expire",
				},
				{
					Label:         util.Translation("Alerting sound"),
					Element:       ElementTypeSelect,
					SelectOptions: pushoverSoundOptions,
					PropertyName:  "sound",
				},
				{
					Label:         util.Translation("OK sound"),
					Element:       ElementTypeSelect,
					SelectOptions: pushoverSoundOptions,
					PropertyName:  "okSound",
				},
				{ // New in 9.3.
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "title",
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "slack",
			Name:        "Slack",
			Description: util.Translation("Sends notifications to Slack"),
			Heading:     "Slack settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Recipient"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Specify channel, private group, or IM channel (can be an encoded ID or a name) - required unless you provide a webhook"),
					PropertyName: "recipient",
					Required:     true,
					DependsOn:    "url",
				},
				// Logically, this field should be required when not using a webhook, since the Slack API needs a token.
				// However, since the UI doesn't allow to say that a field is required or not depending on another field,
				// we've gone with the compromise of making this field optional and instead return a validation error
				// if it's necessary and missing.
				{
					Label:        util.Translation("Token"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Provide a Slack API token (starts with \"xoxb\") - required unless you provide a webhook"),
					PropertyName: "token",
					Secure:       true,
					Required:     true,
					DependsOn:    "url",
				},
				{
					Label:        util.Translation("Username"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Set the username for the bot's message"),
					PropertyName: "username",
				},
				{
					Label:        util.Translation("Icon emoji"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Provide an emoji to use as the icon for the bot's message. Overrides the icon URL"),
					PropertyName: "icon_emoji",
				},
				{
					Label:        util.Translation("Icon URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Provide a URL to an image to use as the icon for the bot's message"),
					PropertyName: "icon_url",
				},
				{
					Label:        util.Translation("Mention Users"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Mention one or more users (comma separated) when notifying in a channel, by ID (you can copy this from the user's Slack profile)"),
					PropertyName: "mentionUsers",
				},
				{
					Label:        util.Translation("Mention Groups"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Mention one or more groups (comma separated) when notifying in a channel (you can copy this from the group's Slack profile URL)"),
					PropertyName: "mentionGroups",
				},
				{
					Label:   util.Translation("Mention Channel"),
					Element: ElementTypeSelect,
					SelectOptions: []SelectOption{
						{
							Value: "",
							Label: util.Translation("Disabled"),
						},
						{
							Value: "here",
							Label: util.Translation("Every active channel member"),
						},
						{
							Value: "channel",
							Label: util.Translation("Every channel member"),
						},
					},
					Description:  util.Translation("Mention whole channel or just active members when notifying"),
					PropertyName: "mentionChannel",
				},
				{
					Label:        "Webhook URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Optionally provide a Slack incoming webhook URL for sending messages, in this case the token isn't necessary"),
					Placeholder:  util.Translation("Slack incoming webhook URL"),
					PropertyName: "url",
					Secure:       true,
					Required:     true,
					DependsOn:    "token",
				},
				{ // New in 8.4.
					Label:        util.Translation("Endpoint URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Optionally provide a custom Slack message API endpoint for non-webhook requests, default is https://slack.com/api/chat.postMessage"),
					Placeholder:  "Slack endpoint url",
					PropertyName: "endpointUrl",
				},
				{ // New in 8.0.
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the slack message"),
					PropertyName: "title",
					Placeholder:  `{{ template "slack.default.title" . }}`,
				},
				{ // New in 8.0.
					Label:        util.Translation("Text Body"),
					Element:      ElementTypeTextArea,
					Description:  util.Translation("Body of the slack message"),
					PropertyName: "text",
					Placeholder:  `{{ template "slack.default.text" . }}`,
				},
			},
		},
		{
			Type:        "sensugo",
			Name:        "Sensu Go",
			Description: util.Translation("Sends HTTP POST request to a Sensu Go API"),
			Heading:     "Sensu Go Settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Backend URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "http://sensu-api.local:8080",
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("API Key"),
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					Description:  util.Translation("API key to auth to Sensu Go backend"),
					PropertyName: "apikey",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        util.Translation("Proxy entity name"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "default",
					PropertyName: "entity",
				},
				{
					Label:        util.Translation("Check name"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "default",
					PropertyName: "check",
				},
				{
					Label:        util.Translation("Handler"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "handler",
				},
				{
					Label:        util.Translation("Namespace"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "default",
					PropertyName: "namespace",
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "teams",
			Name:        "Microsoft Teams",
			Description: util.Translation("Sends notifications using Incoming Webhook connector to Microsoft Teams"),
			Heading:     "Teams settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Teams incoming webhook url"),
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the Teams message"),
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{
					Label:        util.Translation("Section Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Section title for the Teams message. Leave blank for none"),
					PropertyName: "sectiontitle",
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "telegram",
			Name:        "Telegram",
			Description: util.Translation("Sends notifications to Telegram"),
			Heading:     "Telegram API settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("BOT API Token"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Telegram BOT API Token"),
					PropertyName: "bottoken",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        util.Translation("Chat ID"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Integer Telegram Chat Identifier"),
					PropertyName: "chatid",
					Required:     true,
				},
				{ // New in 8.0.
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "webhook",
			Name:        "Webhook",
			Description: util.Translation("Sends HTTP POST request to a URL"),
			Heading:     "Webhook settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:   util.Translation("HTTP Method"),
					Element: ElementTypeSelect,
					SelectOptions: []SelectOption{
						{
							Value: "POST",
							Label: "POST",
						},
						{
							Value: "PUT",
							Label: "PUT",
						},
					},
					PropertyName: "httpMethod",
				},
				{
					Label:        util.Translation("HTTP Basic Authentication - Username"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "username",
				},
				{
					Label:        util.Translation("HTTP Basic Authentication - Password"),
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "password",
					Secure:       true,
				},
				{ // New in 9.1
					Label:        util.Translation("Authorization Header - Scheme"),
					Description:  util.Translation("Optionally provide a scheme for the Authorization Request Header. Default is Bearer"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "authorization_scheme",
					Placeholder:  "Bearer",
				},
				{ // New in 9.1
					Label:        util.Translation("Authorization Header - Credentials"),
					Description:  util.Translation("Credentials for the Authorization Request header. Only one of HTTP Basic Authentication or Authorization Request Header can be set"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "authorization_credentials",
					Secure:       true,
				},
				{ // New in 8.0. TODO: How to enforce only numbers?
					Label:        util.Translation("Max Alerts"),
					Description:  util.Translation("Max alerts to include in a notification. Remaining alerts in the same batch will be ignored above this number. 0 means no limit"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "maxAlerts",
				},
				{ // New in 9.3.
					Label:        util.Translation("Title"),
					Description:  util.Translation("Templated title of the message"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{ // New in 9.3.
					Label:        util.Translation("Message"),
					Description:  util.Translation("Custom message. You can use template variables"),
					Element:      ElementTypeTextArea,
					PropertyName: "message",
					Placeholder:  channels.DefaultMessageEmbed,
				},
			},
		},
		{
			Type:        "wecom",
			Name:        "WeCom",
			Description: util.Translation("Send alerts generated by Grafana to WeCom"),
			Heading:     "WeCom settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Webhook URL"),
					Description:  util.Translation("Required if using GroupRobot"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxxx",
					PropertyName: "url",
					Secure:       true,
					Required:     true,
					DependsOn:    "secret",
				},
				{
					Label:        util.Translation("Agent ID"),
					Description:  util.Translation("Required if using APIAPP, see https://work.weixin.qq.com/wework_admin/frame#apps create ApiApp"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "1000002",
					PropertyName: "agent_id",
					Required:     true,
					DependsOn:    "url",
				},
				{
					Label:        util.Translation("Corp ID"),
					Description:  util.Translation("Required if using APIAPP, see https://work.weixin.qq.com/wework_admin/frame#profile"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "wwxxxxxxxxx",
					PropertyName: "corp_id",
					Required:     true,
					DependsOn:    "url",
				},
				{
					Label:        util.Translation("Secret"),
					Description:  util.Translation("Required if using APIAPP"),
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					Placeholder:  "secret",
					PropertyName: "secret",
					Secure:       true,
					Required:     true,
					DependsOn:    "url",
				},
				{
					Label:        util.Translation("Message Type"),
					Element:      ElementTypeSelect,
					PropertyName: "msgtype",
					SelectOptions: []SelectOption{
						{
							Value: "text",
							Label: "Text",
						},
						{
							Value: "markdown",
							Label: "Markdown",
						},
					},
					Placeholder: "Text",
				},
				{
					Label:        util.Translation("Message"),
					Description:  util.Translation("Custom WeCom message. You can use template variables"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
				{ // New in 9.1.
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the message"),
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{
					Label:        util.Translation("To User"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "@all",
					PropertyName: util.Translation("touser"),
				},
			},
		},
		{
			Type:        "prometheus-alertmanager",
			Name:        "Alertmanager",
			Description: util.Translation("Sends notifications to Alertmanager"),
			Heading:     "Alertmanager Settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "http://localhost:9093",
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("Basic Auth User"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "basicAuthUser",
				},
				{
					Label:        util.Translation("Basic Auth Password"),
					Element:      ElementTypeInput,
					InputType:    InputTypePassword,
					PropertyName: "basicAuthPassword",
					Secure:       true,
				},
			},
		},
		{
			Type:        "discord",
			Name:        "Discord",
			Heading:     "Discord settings",
			Description: util.Translation("Sends notifications to Discord"),
			Options: []NotifierOption{
				{
					Label:        util.Translation("Title"),
					Description:  util.Translation("Templated title of the message"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "title",
				},
				{
					Label:        util.Translation("Message Content"),
					Description:  util.Translation("Mention a group using @ or a user using <@ID> when notifying in a channel"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
				{
					Label:        util.Translation("Webhook URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Discord webhook URL"),
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("Avatar URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					PropertyName: "avatar_url",
				},
				{
					Label:        util.Translation("Use Discord's Webhook Username"),
					Description:  util.Translation("Use the username configured in Discord's webhook settings. Otherwise, the username will be 'Grafana'"),
					Element:      ElementTypeCheckbox,
					PropertyName: "use_discord_username",
				},
			},
		},
		{
			Type:        "googlechat",
			Name:        "Google Hangouts Chat",
			Description: util.Translation("Sends notifications to Google Hangouts Chat via webhooks based on the official JSON message format"),
			Heading:     "Google Hangouts Chat settings",
			Options: []NotifierOption{
				{
					Label:        "URL",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("Google Hangouts Chat incoming webhook url"),
					PropertyName: "url",
					Required:     true,
				},
				{
					Label:        util.Translation("Title"),
					Description:  util.Translation("Templated title of the message"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "title",
				},
				{
					Label:        util.Translation("Message"),
					Element:      ElementTypeTextArea,
					Placeholder:  channels.DefaultMessageEmbed,
					PropertyName: "message",
				},
			},
		},
		{
			Type:        "LINE",
			Name:        "LINE",
			Description: util.Translation("Send notifications to LINE notify"),
			Heading:     "LINE notify settings",
			Options: []NotifierOption{
				{
					Label:        "Token",
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("LINE notify token key"),
					PropertyName: "token",
					Required:     true,
					Secure:       true,
				},
				{ // New in 9.3
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the message"),
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{ // New in 9.3
					Label:        util.Translation("Description"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated description of the message"),
					PropertyName: "description",
					Placeholder:  channels.DefaultMessageEmbed,
				},
			},
		},
		{
			Type:        "threema",
			Name:        "Threema Gateway",
			Description: util.Translation("Sends notifications to Threema using Threema Gateway (Basic IDs)"),
			Heading:     "Threema Gateway settings",
			Info: "Notifications can be configured for any Threema Gateway ID of type \"Basic\". End-to-End IDs are not currently supported." +
				"The Threema Gateway ID can be set up at https://gateway.threema.ch/.",
			Options: []NotifierOption{
				{
					Label:          util.Translation("Gateway ID"),
					Element:        ElementTypeInput,
					InputType:      InputTypeText,
					Placeholder:    "*3MAGWID",
					Description:    util.Translation("Your 8 character Threema Gateway Basic ID (starting with a *)"),
					PropertyName:   "gateway_id",
					Required:       true,
					ValidationRule: "\\*[0-9A-Z]{7}",
				},
				{
					Label:          util.Translation("Recipient ID"),
					Element:        ElementTypeInput,
					InputType:      InputTypeText,
					Placeholder:    "YOUR3MID",
					Description:    util.Translation("The 8 character Threema ID that should receive the alerts"),
					PropertyName:   "recipient_id",
					Required:       true,
					ValidationRule: "[0-9A-Z]{8}",
				},
				{
					Label:        util.Translation("API Secret"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Your Threema Gateway API secret"),
					PropertyName: "api_secret",
					Required:     true,
					Secure:       true,
				},
				{ // New in 9.3
					Label:        util.Translation("Title"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated title of the message"),
					PropertyName: "title",
					Placeholder:  channels.DefaultMessageTitleEmbed,
				},
				{ // New in 9.3
					Label:        util.Translation("Description"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Description:  util.Translation("Templated description of the message"),
					PropertyName: "description",
					Placeholder:  channels.DefaultMessageEmbed,
				},
			},
		},
		{
			Type:        "opsgenie",
			Name:        "OpsGenie",
			Description: util.Translation("Sends notifications to OpsGenie"),
			Heading:     "OpsGenie settings",
			Options: []NotifierOption{
				{
					Label:        util.Translation("API Key"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  util.Translation("OpsGenie API Key"),
					PropertyName: "apiKey",
					Required:     true,
					Secure:       true,
				},
				{
					Label:        util.Translation("Alert API URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "https://api.opsgenie.com/v2/alerts",
					PropertyName: "apiUrl",
					Required:     true,
				},
				{
					Label:        util.Translation("Message"),
					Description:  util.Translation("Alert text limited to 130 characters"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  channels.DefaultMessageTitleEmbed,
					PropertyName: "message",
				},
				{
					Label:        util.Translation("Description"),
					Description:  util.Translation("A description of the incident"),
					Element:      ElementTypeTextArea,
					PropertyName: "description",
				},
				{
					Label:        util.Translation("Auto close incidents"),
					Element:      ElementTypeCheckbox,
					Description:  util.Translation("Automatically close alerts in OpsGenie once the alert goes back to ok"),
					PropertyName: "autoClose",
				}, {
					Label:        util.Translation("Override priority"),
					Element:      ElementTypeCheckbox,
					Description:  util.Translation("Allow the alert priority to be set using the og_priority annotation"),
					PropertyName: "overridePriority",
				},
				{
					Label:   util.Translation("Send notification tags as"),
					Element: ElementTypeSelect,
					SelectOptions: []SelectOption{
						{
							Value: channels.OpsgenieSendTags,
							Label: util.Translation("Tags"),
						},
						{
							Value: channels.OpsgenieSendDetails,
							Label: util.Translation("Extra Properties"),
						},
						{
							Value: channels.OpsgenieSendBoth,
							Label: util.Translation("Tags & Extra Properties"),
						},
					},
					Description:  util.Translation("Send the common annotations to Opsgenie as either Extra Properties, Tags or both"),
					PropertyName: "sendTagsAs",
				},
			},
		},
		{
			Type:        "webex",
			Name:        "Cisco Webex Teams",
			Description: util.Translation("Sends notifications to Cisco Webex Teams"),
			Heading:     "Webex settings",
			Info:        "Notifications can be configured for any Cisco Webex Teams",
			Options: []NotifierOption{
				{
					Label:        util.Translation("Cisco Webex API URL"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "https://api.ciscospark.com/v1/messages",
					Description:  util.Translation("API endpoint at which we'll send webhooks to"),
					PropertyName: "api_url",
				},
				{
					Label:        util.Translation("Room ID"),
					Description:  util.Translation("The room ID to send messages to"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  "GMtOWY0ZGJkNzMyMGFl",
					PropertyName: "room_id",
					Required:     true,
				},
				{
					Label:        util.Translation("Bot Token"),
					Description:  util.Translation("Non-expiring access token of the bot that will post messages on our behalf"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  `GMtOWY0ZGJkNzMyMGFl-12535454-123213`,
					PropertyName: "bot_token",
					Secure:       true,
					Required:     true,
				},
				{
					Label:        util.Translation("Message Template"),
					Description:  util.Translation("Message template to use. Markdown is supported"),
					Element:      ElementTypeInput,
					InputType:    InputTypeText,
					Placeholder:  `{{ template "default.message" . }}`,
					PropertyName: "message",
				},
			},
		},
	}
}
